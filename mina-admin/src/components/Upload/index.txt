<template>
  <v-container>
    <v-row justify="center">
      <v-col cols="12" md="6">
        <div class="d-flex flex-wrap">
          <div class="ma-2">
            <v-sheet color="white" elevation="1" width="200" height="200" @click="chooseFile">
              <v-row justify="center" align="center" style="height:100%">
                <div align="center">
                  <v-icon icon="mdi-plus" ></v-icon>
<!--                  <v-img v-show="previewImage" :src="previewImage" aspect-ratio="1" class="mb-4" width="200" height="200"></v-img>-->
                </div>
              </v-row>
            </v-sheet>
          </div>
          <div class="ma-2" v-if="previewImage">
            <v-sheet color="white" elevation="1" width="200" height="200" @click="chooseFile">
              <v-row justify="center" align="center" style="height:100%">
                <div align="center">
                  <v-img :src="previewImage" aspect-ratio="1" class="mb-4" width="200" height="200"></v-img>
                </div>
              </v-row>
            </v-sheet>
          </div>
        </div>
        <input type="file" ref="fileInput" accept="image/*" @change="onFileChange" style="display: none" />
      </v-col>
    </v-row>
  </v-container>
</template>

<script setup lang="ts">
import { ref } from 'vue';

const props = defineProps({
  fileList: {
    type: Array,
    default: () => {}
  },
  preview: {
    type: Boolean,
    default: false
  },
  multiple: {
    type: Boolean,
    default: false
  },
  width: {
    type: Number,
    default: 200
  },
  height: {
    type: Number,
    default: 200
  }
})
// 响应式数据
const fileName = ref<string>('');
const previewImage = ref<string | null>(null);
const prependIcon = ref<'mdi-image-plus' | 'mdi-check'>('mdi-image-plus');

// 引用DOM元素
const fileInput = ref<HTMLInputElement | null>(null);

// 方法
const chooseFile = () => {
  if (fileInput.value) {
    fileInput.value.click();
  }
};

const onFileChange = (event: Event) => {
  const target = (event.target as HTMLInputElement);
  const file = target.files[0];
  if (file) {
    fileName.value = file.name;
    previewImage.value = URL.createObjectURL(file);
    prependIcon.value = 'mdi-check';
  }
};

// const submitFile = () => {
//   console.log('Uploading file:', fileName.value);
//   // 注意：这里的预览图像URL（previewImage.value）不会在服务器上可用，它只是一个本地URL。
//   // 你需要发送实际的文件对象（例如使用FormData）到服务器。
//   // 例如：
//   // const formData = new FormData();
//   // formData.append('file', (fileInput.value as HTMLInputElement).files[0]);
//   // axios.post('/upload', formData);
// };
//
// const reset = () => {
//   fileName.value = '';
//   previewImage.value = null;
//   prependIcon.value = 'mdi-image-plus';
//   if (fileInput.value) {
//     fileInput.value.value = ''; // 清空文件输入
//   }
// };
</script>

<style scoped>
/* 在此处添加你的自定义样式 */
</style>



<script setup lang="ts">
import { ref, watch, computed, PropType } from 'vue';

interface ImageInfo {
  uid: string; // 添加一个唯一标识符，以防重名文件导致的key重复问题
  file: File;
  previewUrl: string;
  name: string;
}
const emit = defineEmits(["update:fileList", "handleRemove"]);

const props = defineProps({
  limit: {
    type: Number as PropType<number>,
    default: 0, // 默认无限制
  },
  imgList: {
    type: Array, // 假设FileInfo是包含file和name等属性的对象类型，你需要根据实际情况调整
    default: () => [],
  },
});

const localImgList = ref<ImageInfo[]>([]);
const fileInputRef = ref<HTMLInputElement | null>(null);

// 生成唯一标识符的函数
const generateUid = () => {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
};

// 初始化localImgList，将props中的imgList转换为带有previewUrl和uid的对象数组
watch(
  () => props.imgList,
  (newList) => {
    localImgList.value = newList.map(item => {
      // 假设item是一个包含file和name的对象，你需要根据实际情况调整
      const reader = new FileReader();
      reader.onload = (e) => {
        if (localImgList.value.length < props.limit) { // 确保不会超出限制
          const previewUrl = e.target.result as string;
          localImgList.value.push({
            uid: generateUid(),
            file: item.file, // 假设item有一个file属性
            previewUrl,
            name: item.name, // 假设item有一个name属性
          });
        }
      };
      reader.readAsDataURL(item.file); // 假设item有一个file属性可以被读取
      // 注意：这里的异步操作可能会导致一些问题，因为reader.onload是异步执行的。
      // 一个更好的做法是在父组件中预先处理这些文件，只传递已经转换好的带有previewUrl的对象数组给子组件。
    }).filter(item => !!item); // 过滤掉未定义的项（虽然在这个场景下可能不会有）
  }, { immediate: true });

const currentLimitReached = computed(() => {
  return localImgList.value.length >= props.limit && props.limit > 0;
});

const triggerFileUpload = () => {
  if (fileInputRef.value && !currentLimitReached.value) {
    fileInputRef.value.click();
  }
};

const handleFileUpload = (event: Event) => {
  const input = event.target as HTMLInputElement;
  const files = input.files;
  if (!files || currentLimitReached.value) return;

  Array.from(files).forEach(file => {
    if (localImgList.value.length >= props.limit) return;
    const reader = new FileReader();
    reader.onload = (e) => {
      const previewUrl = e.target.result as string;
      const newImageInfo = {
        uid: generateUid(),
        file,
        previewUrl,
        name: file.name,
      };
      localImgList.value.push(newImageInfo);

      // 通知父组件新图片已添加
      emit('update:fileList', newImageInfo); // 或者 emit(update:fileList, [...localImgList.value]); 但这样可能不是最高效的，因为父组件可能已经有了大部分数据
      // 如果父组件需要完整的列表，更好的做法可能是在父组件中监听这个事件，并使用这个新图片信息来更新其自己的状态
    };
    reader.readAsDataURL(file);
  });
};

const removeImage = (index: number) => {
  const removedImageInfo = localImgList.value.splice(index, 1)[0];

  // 通知父组件图片已移除
  emit('handleRemove', removedImageInfo); // 传递被移除的图片信息给父组件
};
</script>

<template>
  <div>
    <div class="d-flex align-center">
      <div v-if="localImgList.length > 0" class="preview-container">
        <div v-for="(item, index) in localImgList" :key="item.uid" class="preview-item">
          <img :src="item.previewUrl" alt="" class="preview-image" />
          <!--        <span class="file-name">{{ item.name }}</span>-->
          <v-btn size="x-small" variant="text" @click="removeImage(index)" class="remove-button" icon="mdi-close" />
        </div>
      </div>
      <input type="file" multiple @change="handleFileUpload" ref="fileInputRef" style="display: none;" />
      <v-btn style="margin-left: 5px" prepend-icon="mdi-cloud-upload-outline" @click="triggerFileUpload" v-show="!currentLimitReached">点击选择图片</v-btn>
    </div>
    <p v-if="currentLimitReached" class="limit-message">You have reached the file upload limit.</p>
  </div>
</template>


<style scoped>
.preview-container {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}

.preview-item {
  position: relative;
  width: 100px;
  height: 100px;
}

.preview-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.file-name {
  position: absolute;
  bottom: 5px;
  left: 5px;
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  padding: 2px 5px;
  border-radius: 3px;
}

.remove-button {
  position: absolute;
  top: 0px;
  right: 0px;
//background-color: red;
//color: white;
  border: none;
//padding: 2px 5px;
  border-radius: 3px;
  cursor: pointer;
}

.limit-message {
  color: red;
  margin-top: 10px;
}
</style>



<template>
  <div class="image-previewer">
<!--    <input-->
<!--        type="file"-->
<!--        @change="handleFileChange"-->
<!--        accept="image/*"-->
<!--        multiple-->
<!--        ref="fileInput"-->
<!--        style="display: none;"-->
<!--    />-->
    <v-file-input
        label="选择图片"
        multiple
        accept="image/*"
        @change="onFileChange"
        :counter="maxFiles - fileList.length"
        :counter-value="fileList.length"
    ></v-file-input>
    <v-btn @click="triggerFileInput">选择图片</v-btn>
    <div v-if="previewImages.length" class="preview-images">
      <v-img
          v-for="(image, index) in previewImages"
          :key="index"
          :src="image"
          class="preview-image"
          aspect-ratio="1"
      />
    </div>
    <p v-if="maxImages && selectedFiles.length > maxImages" class="error-message">
      已超出最大上传数量：{{ maxImages }}
    </p>
  </div>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue';

const props = defineProps<{ maxImages?: number }>();
const emit = defineEmits<{ (e: 'files-selected', files: File[]): void }>();

const fileInput = ref<HTMLInputElement | null>(null);
const selectedFiles = ref<File[]>([]);
const previewImages = computed(() =>
    selectedFiles.value.map((file) => URL.createObjectURL(file))
);

const triggerFileInput = () => {
  if (fileInput.value) {
    fileInput.value.click();
  }
};

const handleFileChange = (event: Event) => {
  const target = (event.target as HTMLInputElement);
  const files = target.files;
  if (files && files.length) {
    const newFiles = Array.from(files);
    if (props.maxImages && newFiles.length + selectedFiles.value.length > props.maxImages) {
      alert(`最多只能选择 ${props.maxImages} 张图片`);
      return;
    }
    selectedFiles.value = [...selectedFiles.value, ...newFiles];
    emit('files-selected', newFiles);
  }
};
</script>

<style scoped>
.image-previewer {
  /* 添加你的样式 */
}
.preview-images {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}
.preview-image {
  width: 100px;
  height: 100px;
  object-fit: cover;
}
.error-message {
  color: red;
  margin-top: 10px;
}
</style>


<script setup lang="ts">
import { ref, computed } from 'vue';

const props = defineProps<{ maxImages?: number }>();
const emit = defineEmits<{ (e: 'update:fileList', files: File[]): void }>();

const fileInput = ref<HTMLInputElement | null>(null);
const selectedFiles = ref<File[]>([]);
const previewImages = computed(() =>
    selectedFiles.value.map((file) => URL.createObjectURL(file))
);

const triggerFileInput = () => {
  if (fileInput.value) {
    fileInput.value.click();
  }
};

const handleFileChange = (event: Event) => {
  const target = (event.target as HTMLInputElement);
  const files = target.files;
  if (files && files.length) {
    const newFiles = Array.from(files);
    if (props.maxImages && newFiles.length + selectedFiles.value.length > props.maxImages) {
      alert(`最多只能选择 ${props.maxImages} 张图片`);
      return;
    }
    selectedFiles.value = [...selectedFiles.value, ...newFiles];
    emit('update:fileList', newFiles);
  }
};
</script>
<template>
  <div class="image-previewer">
        <input
            type="file"
            @change="handleFileChange"
            accept="image/*"
            multiple
            ref="fileInput"
            style="display: none;"
        />
<!--    <v-file-input-->
<!--        label="选择图片"-->
<!--        multiple-->
<!--        accept="image/*"-->
<!--        @change="onFileChange"-->
<!--        :counter="maxFiles - fileList.length"-->
<!--        :counter-value="fileList.length"-->
<!--    ></v-file-input>-->
    <v-btn @click="triggerFileInput">选择图片</v-btn>
    <div v-if="previewImages.length" class="preview-images">
      <v-img
          v-for="(image, index) in previewImages"
          :key="index"
          :src="image"
          class="preview-image"
          aspect-ratio="1"
      />
    </div>
    <p v-if="maxImages && selectedFiles.length > maxImages" class="error-message">
      已超出最大上传数量：{{ maxImages }}
    </p>
  </div>
</template>


<style scoped>
.image-previewer {
  /* 添加你的样式 */
}
.preview-images {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}
.preview-image {
  width: 100px;
  height: 100px;
  object-fit: cover;
}
.error-message {
  color: red;
  margin-top: 10px;
}
</style>


<style scoped>
.image-previewer {
  /* 添加你的样式 */
}
.preview-images {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}
.preview-image {
  width: 100px;
  height: 100px;
  object-fit: cover;
}
.error-message {
  color: red;
  margin-top: 10px;
}
</style>

